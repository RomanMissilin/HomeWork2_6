### Шаг 1

Создать Spring Boot проект.

### Шаг 2

Подключить модуль Spring Web.

### Шаг 3

Перенести из курсовой класс Employee, оставив в нем только поля firstName и lastName, конструктор, геттеры и методы hashCode, equals, toString.

### Шаг 4

Создать сервис EmployeeService, который хранит внутри поле с массивом сотрудников.

### Шаг 5

Реализовать в сервисе три метода, которые принимают в качестве параметров firstName и lastName:

1. Добавить сотрудника.
2. Удалить сотрудника.
3. Найти сотрудника.

### Шаг 6

Написать собственное непроверяемое исключение EmployeeNotFoundException, которое выбрасывается, если сотрудник не найден.

### Шаг 7

Написать собственное непроверяемое исключение EmployeeStorageIsFullException, которое выбрасывается, если массив сотрудников переполнен.

### Шаг 8

Написать собственное непроверяемое исключение EmployeeAlreadyAddedException, которое выбрасывается,
когда нового сотрудника пытаются добавить в массив, а в массиве уже есть такой сотрудник.  **

### Шаг 9

Добавить в методы из шага 5 новые исключения.

1. В метод с добавлением сотрудника нужно добавить выброс исключения из шага 7 в ситуации, когда массив переполнен.
2. В метод с добавлением сотрудника нужно добавить выброс исключения из шага 8 в ситуации, когда добавляемый сотрудник уже имеется в массиве.
3. В метод с удалением сотрудника нужно добавить выброс исключения из шага 6 в ситуации, когда удаляемый сотрудник не найден.
4. В метод с поиском сотрудника нужно добавить выброс исключения из шага 6 в ситуации, когда сотрудник не найден.

### Шаг 10

Реализовать EmployeeController, который имеет поле EmployeeService.

Объявить конструктор с этим параметром, чтобы заинджектить EmployeeService в EmployeeController.

### Шаг 11

Объявить в контроллере 3 метода:

1. По адресу /employee/add?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON,
т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение ArrayIsFull в случае переполнения массива или EmployeeAlreadyAdded в случае,
когда сотрудник уже существует.
2. По адресу /employee/remove?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON,
т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение со статусом EmployeeNotFound, если сотрудник отсутствует.
3. По адресу /employee/find?firstName=Ivan&lastName=Ivanov должен вернуться объект Employee в формате JSON,
т. е. { "firstName": "Ivan", "lastName": "Ivanov" }, или исключение со статусом EmployeeNotFound, если такой сотрудник отсутствует.

### **Шаг 12**

Заменить массивы на листы. В методах, которые принимают массивы, также провести изменения.

### Шаг 13

Написать метод, который выводит в браузер список всех сотрудников в формате JSON (необходимо вернуть объект списка).